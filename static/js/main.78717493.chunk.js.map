{"version":3,"sources":["components/TodoList.module.css","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","root","input","iconButton","divider","list","listContainer","withStyles","listItem","border","borderLeft","marginBottom","props","index","title","completed","deleteButtonHandler","checkButtonHandler","classes","react_default","a","createElement","ListItem","key","className","dense","button","onClick","ListItemIcon","Checkbox","edge","style","color","checked","tabIndex","disableRipple","ListItemText","primary","textDecoration","ListItemSecondaryAction","IconButton","aria-label","DeleteOutlined_default","DEMO","TodoList","state","data","text","componentDidMount","_callee","resp","regenerator_default","wrap","_context","prev","next","_this","setState","demo","fetch","sent","json","document","addEventListener","handleKeyUp","stop","componentWillUnmount","removeEventListener","inputChangeHandler","event","currentString","target","value","currentChars","split","numChars","length","allChars","_this$state","keyCode","newItem","description","creation_time","push","console","log","postData","buttonClickHandler","_this$state2","_callee2","url","_context2","method","body","JSON","stringify","splice","clicked","getNumberItems","getNumberCompleted","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","err","return","_this2","this","Paper","disabled","FormatListBulleted_default","InputBase","placeholder","inputProps","onChange","onKeyPress","Divider","AddCircleOutlined_default","List","map","item","TodoItem","React","Component","App","rel","href","components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78717493.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TodoList_root__3OOzX\",\"input\":\"TodoList_input__1ceE3\",\"iconButton\":\"TodoList_iconButton__1UJ8k\",\"divider\":\"TodoList_divider__AncIW\",\"list\":\"TodoList_list__3mjNJ\",\"listContainer\":\"TodoList_listContainer__N7fe3\"};","import React from 'react';\r\n\r\n\r\nimport { withStyles } from '@material-ui/styles';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport DeleteIcon from '@material-ui/icons/DeleteOutlined';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nconst styles = {\r\n  listItem: {\r\n    border: '1px solid #1772B3',\r\n    borderLeft: '10px solid #1772B3',\r\n    marginBottom: '4px'\r\n  }\r\n};\r\n\r\nconst todoItem = (props) => {\r\n\r\n  const { index, title, completed, deleteButtonHandler, checkButtonHandler, classes } = props;\r\n\r\n  return (\r\n    <div>\r\n      <ListItem\r\n        key={index}\r\n        className = {classes.listItem}\r\n        dense\r\n        button\r\n        onClick={() => checkButtonHandler(index, 'listItem')}>\r\n        <ListItemIcon>\r\n          <Checkbox\r\n            edge=\"start\"\r\n            style={{color: '#1772B3'}}\r\n            checked={completed}\r\n            tabIndex={-1}\r\n            disableRipple\r\n            onClick={() => checkButtonHandler(index, 'check')} />\r\n        </ListItemIcon>\r\n        <ListItemText\r\n          primary={title}\r\n          style={{'textDecoration': (completed) ? 'line-through' : 'none'}} />\r\n        <ListItemSecondaryAction>\r\n          <IconButton\r\n            edge=\"end\"\r\n            aria-label=\"Delete\"\r\n            onClick={() => deleteButtonHandler(index)}>\r\n            <DeleteIcon style={{color: '#FF5754'}} />\r\n          </IconButton>\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withStyles(styles)(todoItem)\r\n","import React from 'react';\r\n\r\nimport TodoItem from './TodoItem'\r\n\r\nimport classes from './TodoList.module.css'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/FormatListBulleted';\r\nimport AddIcon from '@material-ui/icons/AddCircleOutlined';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport demo from './demo.json'\r\n\r\nconst DEMO = true;\r\n\r\nclass TodoList extends React.Component {\r\n\r\n  state = {\r\n    data: [],\r\n    text: ''\r\n  }\r\n\r\n  /**\r\n   * Get data when the component is created (either via HTTP or locally\r\n   * for demo).\r\n   */\r\n  componentDidMount = async () => {\r\n    if (DEMO) {\r\n      this.setState({ data: demo.data })\r\n    } else {\r\n      const resp = await fetch('http://localhost:8000/api/todo-list');\r\n      const data = await resp.json();\r\n      this.setState({ data: data.data })\r\n    }\r\n\r\n    document.addEventListener('keyup', this.handleKeyUp, false);\r\n  }\r\n\r\n  /**\r\n   * Remove event listener when component is removed.\r\n   */\r\n  componentWillUnmount = () => {\r\n    document.removeEventListener('keyup', this.handleKeyUp, false);\r\n  }\r\n\r\n  /**\r\n   * Bind changes to input field to state.\r\n   *\r\n   * @param {!ObjType} event Click event\r\n   */\r\n  inputChangeHandler = (event) => {\r\n    const currentString = event.target.value;\r\n    const currentChars = currentString.split('');\r\n\r\n    this.setState({\r\n      text: currentString,\r\n      numChars: currentString.length,\r\n      allChars: currentChars\r\n     })\r\n  }\r\n\r\n  /**\r\n   * Capture `enter` key press to add new item.\r\n   *\r\n   * @param {!ObjType} event Button press event\r\n   */\r\n  handleKeyUp = (event) => {\r\n    const { data, text } = this.state;\r\n\r\n    if (text !== '') {\r\n      if (event.keyCode === 13) {\r\n        const newItem = {\r\n          'title': text,\r\n          'description': 'blank',\r\n          'creation_time': 'blank',\r\n          'completed': false\r\n        }\r\n\r\n        data.push(newItem);\r\n        this.setState({\r\n          data: data,\r\n          text: ''\r\n        }, () => {\r\n          console.log('[POST]', data);\r\n          this.postData('http://localhost:8000/api/todo-list', {'data': data});\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create new item when `+` button pressed.\r\n   *\r\n   * @param {!ObjType} event Click event\r\n   */\r\n  buttonClickHandler = (event) => {\r\n    const { data, text } = this.state;\r\n\r\n    if (text !== '') {\r\n      const newItem = {\r\n        'title': text,\r\n        'description': 'blank',\r\n        'creation_time': 'blank',\r\n        'completed': false\r\n      }\r\n\r\n      data.push(newItem);\r\n      this.setState({\r\n        data: data,\r\n        text: ''\r\n      }, () => {\r\n        console.log('[POST]', data);\r\n        this.postData('http://localhost:8000/api/todo-list', {'data': data});\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * POST data to server.\r\n   *\r\n   * @param {string} url URL to POST data to\r\n   * @param {JSON} data data to post to server\r\n   */\r\n  postData = async (url, data) => {\r\n    if (!DEMO) {\r\n      await fetch(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify(data)\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Capture delete button press.\r\n   *\r\n   * @param {number} index index of item to be deleted\r\n   */\r\n  deleteButtonHandler = (index) => {\r\n    const { data } = this.state;\r\n    data.splice(index, 1)\r\n    this.setState({ data: data}, () => {\r\n      this.postData('http://localhost:8000/api/todo-list', {'data': data});\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Toggle completeness of item when clicked.\r\n   *\r\n   * @param {number} index index of item clicked\r\n   * @param {string} clicked name of item clicked\r\n   */\r\n  checkButtonHandler = (index, clicked) => {\r\n    if (clicked === 'listItem') {\r\n      const { data } = this.state;\r\n      data[index].completed = !data[index].completed;\r\n      this.setState({ data: data}, () => {\r\n        this.postData('http://localhost:8000/api/todo-list', {'data': data});\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get number of items in the list\r\n   *\r\n   * @return {number} number of items in the list\r\n   */\r\n  getNumberItems = () => {\r\n    const { data } = this.state;\r\n    return data.length;\r\n  }\r\n\r\n  /**\r\n   * Get number of completed items in the list\r\n   *\r\n   * @return {number} number of completed items in the list\r\n   */\r\n  getNumberCompleted = () => {\r\n    const { data } = this.state;\r\n\r\n    let completed = 0;\r\n    for (let item of data) {\r\n      if (item.completed)\r\n        completed += 1;\r\n    }\r\n    return completed;\r\n  }\r\n\r\n  render() {\r\n\r\n    const { data } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        {/* Input field and add button */}\r\n        <Paper className={classes.root}>\r\n          <IconButton className={classes.iconButton} disabled aria-label=\"Menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <InputBase\r\n            className={classes.input}\r\n            placeholder=\"Add new todo item!\"\r\n            inputProps={{ 'aria-label': 'Search Google Maps' }}\r\n            onChange={this.inputChangeHandler}\r\n            onKeyPress={this.handleKeyUp}\r\n            value={this.state.text}/>\r\n          <Divider className={classes.divider} />\r\n          <IconButton\r\n            color=\"primary\"\r\n            className={classes.iconButton}\r\n            aria-label=\"Add\"\r\n            style={{color: '#1772B3'}}\r\n            onClick={this.buttonClickHandler}>\r\n            <AddIcon />\r\n          </IconButton>\r\n        </Paper>\r\n\r\n        {/* List of items */}\r\n        <div className={classes.listContainer}>\r\n          <List className={classes.list}>\r\n            {data.map((item , index) => {\r\n              return (\r\n                <TodoItem\r\n                  key={index}\r\n                  index={index}\r\n                  title={item.title}\r\n                  completed={item.completed}\r\n                  deleteButtonHandler={this.deleteButtonHandler}\r\n                  checkButtonHandler={this.checkButtonHandler} />\r\n              );\r\n            })}\r\n\r\n          </List>\r\n        </div>\r\n\r\n        {/* Shows number of completed items */}\r\n        <div style={{color: '#1772B3'}}>\r\n          Completed {this.getNumberCompleted()} of {this.getNumberItems()}\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport TodoList from './components/TodoList'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <div className=\"title\">\r\n        <h1 className=\"titleText\">\r\n          Todo List\r\n        </h1>\r\n        <h5 className=\"builtText\">\r\n          Built in React <i className=\"fab fa-react\"></i>\r\n        </h5>\r\n        <a className=\"repoLink\" target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://github.com/pathansen/react-todo-list\">\r\n          <h5 className=\"repoText\">\r\n            Code on GitHub <i className=\"fab fa-github\"></i>\r\n          </h5>\r\n          </a>\r\n      </div>\r\n\r\n      <div className=\"list\">\r\n        <TodoList />\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}